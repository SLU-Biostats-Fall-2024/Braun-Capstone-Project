---
title: "Cap DAP"
format: html
editor: visual
---

## Setup:

```{r}
rm(list=ls()) # cleans the environment
library(tidyverse) # imports the tidyverse package
library(here) # imports the here package
library(ggfortify) # imports the ggfortify package
```

## Import the data set:

```{r}
diabetes <- read.csv(here("data", "BMI and Diabetes.csv")) 
# import the data and assign it to the variable name: "diabetes"
```

## Look at data:

```{r}
glimpse(diabetes)
```

This shows that we have 211,833 rows and 25 columns. The majority of the columns are ints or dbls. Age, Gender, diabetes_diagnosed, diabetes_censor, smoking_status, drinking_status, and family_history should be converted to factors. Gender should turned into Male/Female instead of 1/2.

### Turn NA values in diabetes_diagnosed into 0s:

I am doing this because I believe that all the NA values are individuals who have been followed up on and not diagnosed with diabetes. To check this I will find the amount of NA values in the followup_year column, if it is a negligible amount (\< 5% of data) then I will assume that the majority were not diagnosed with diabetes.

```{r}
length(which(is.na(diabetes$followup_year)))
```

This code shows that every person was followed up on so I will assume that people who did not get diagnosed with diabetes do not have diabetes.

```{r}
fix_diabetes <- which(is.na(diabetes$diabetes_diagnosed)) # is.na locates all rows that are NA in the diabetes_diagnosed column

diabetes$diabetes_diagnosed[fix_diabetes] <- 0 # turn NA values into 0

diabetes$diabetes_diagnosed <- factor(diabetes$diabetes_diagnosed) # re-factor 
```

0 now represents individuals that were not diagnosed with diabetes during the experiment.

## Convert variables to Factors:

**Turn gender into a factor and turn 1s into male and 2s into female:**

Reassigning gender values to male or female makes the data easier to understand for users.

```{r}
fix_gender_M <- which(diabetes$Gender == 1)
diabetes$Gender[fix_gender_M] <- "Male" # rename all 1 factors into male

fix_gender_F <- which(diabetes$Gender == 2)
diabetes$Gender[fix_gender_F] <- "Female" #rename all 2 factors into female

diabetes$Gender <- factor(diabetes$Gender) # reassign the values
```

**Turn family_history, drinking_status, smoking_status, and diabetes_diagnosed into factors:**

```{r}
diabetes$family_history <- as.factor(diabetes$family_history)
# turns family_history into a factor

diabetes$drinking_status <- as.factor(diabetes$drinking_status)
# turns drinking_status into a factor

diabetes$smoking_status <- as.factor(diabetes$smoking_status)
# turns smoking_status into a factor

diabetes$diabetes_diagnosed <- as.factor(diabetes$diabetes_diagnosed)
# turns diabetes_diagnosed into a factor
```

## Create a mean arterial pressure column:

I am creating a new column so that I can have 1 blood pressure number instead of using both systolic blood pressure and diastolic blood pressure.

```{r}
diabetes <- diabetes |> mutate(MAP = (DBP + (1/3)*(SBP-DBP))) 
# creates a new column called MAP using DBP and SBP
```

Calculation for MAP comes from:

DeMers, D., & Wachs, D. (2024). Physiology, Mean Arterial Pressure. In *StatPearls*. StatPearls Publishing. <http://www.ncbi.nlm.nih.gov/books/NBK538226/>

By using the systolic and diastolic blood pressures, we can calculate the mean arterial pressure (MAP) which gives us the average blood pressure in the arteries.

## Create a BMI_cat column:

```{r}
diabetes <- diabetes |> 
  mutate(BMI_cat = case_when(BMI < 18.5 ~ "Underweight",
                             BMI >= 18.5 & BMI < 25 ~ "Healthy",
                             BMI >= 25 & BMI < 30 ~ "Overweight",
                             BMI >= 30 ~ "Obese"))
# BMI_cat is the category that each BMI falls into
# case_when allows us to assign each category name to the specified BMI values

diabetes$BMI_cat <- as.factor(diabetes$BMI_cat) # turn BMI_cat into a factor variable
levels(diabetes$BMI_cat)
```

This lets us use BMI as a factor instead of integer.

## Check for mistakes and outliers:

**Check for outliers in BMI:**

```{r}
ggplot(diabetes, aes(x=BMI)) +
  geom_boxplot(outlier.color="yellow") # creates a boxplot to see outliers (shown in yellow)

diabetes |> 
  arrange(desc(BMI)) |> # this arranges the BMI from highest to lowest
  head(10) |> # this prints out the 10 highest BMI
  view()

# there are no low-end outliers
```

My analysis shows that there are a lot of outliers for BMI. I plan to leave my outliers in my data set because it is health related and everyone's bodies/health readings are different. Outliers in this category signal that those individuals may have serious health concerns.

**Check for outliers in MAP:**

```{r}
ggplot(diabetes, aes(x=MAP)) +
  geom_boxplot(outlier.color = "red") # creates a boxplot to see outliers (shown in red)

diabetes |> 
  arrange(desc(MAP)) |> # this arranges the MAP from highest to lowest
  head(10) |> # this prints out the 10 highest MAPs
  view()

diabetes |> 
  arrange(MAP) |> # this arranges the MAP from lowest to highest
  head(10) |> # this prints out the 10 lowest MAPs
  view()
```

My analysis shows that there are a lot of outliers for MAP. I plan to leave my outliers in my data set because it is health related and everyone's bodies/health readings are different. Outliers in this category signal that those individuals may have serious health concerns.

**Check for outliers in FPG:**

```{r}
ggplot(diabetes, aes(x=FPG)) +
  geom_boxplot(outlier.color = "blue") # creates a boxplot to see outliers (shown in blue)

diabetes |> 
  arrange(desc(FPG)) |> # sort FPG from highest to lowest
  head(10) |> # look at the 10 highest values
  view()

diabetes |> 
  arrange(FPG) |> # sort FPG from lowest to highest
  head(10) |> # look at the 10 lowest values
  view()
```

My analysis shows that there are a lot of outliers for FPG. I plan to leave my outliers in my data set because it is health related and everyone's bodies/health readings are different. Outliers in this category signal that those individuals may have serious health concerns.

## Save the clean data set to my data folder:

This will keep me from having to re-run all the above code in every new qmd file.

```{r}
write.csv(diabetes, here("data", "diabetes.csv"), row.names=FALSE)
# row.names = FALSE prevents R from adding a column of row numbers to the output file
```

## Exploratory data analysis:

#### 1) BMI vs diabetes_diagnosed

**Plot BMI histogram**

```{r}
ggplot(diabetes, aes(BMI)) +
  geom_histogram()
```

This gives the reader an idea of what the BMI data looks like. Mean BMI appears to be around 23.

**Plot BMI vs diabetes diagnosed:**

I am looking to see if the mean BMI is different for individuals who have been diagnosed and not diagnosed with diabetes.

```{r}
ggplot(diabetes, aes(BMI)) +
  geom_bar(width=1) +
  facet_wrap(diabetes$diabetes_diagnosed, scales = "free_y") # this allows us to see the different graphs more clearly despite having fewer samples for when diabetes_diagnosed = 1
```

The average mean for diabetes diagnosed appears to be around 28 BMI while the average mean for no diabetes diagnosed appears to be around 22. I think that there will be a significant difference in the mean BMI for diagnosis of diabetes.

**Calculate mean BMI and SD for diabetes diagnosed and not diagnosed:**

I am calculating the mean and sd BMI for diabetes diagnosed and not diagnosed.

```{r}
diabetes_bmi <- diabetes |> 
  group_by(diabetes_diagnosed) |> # groups mean and sd BMI by people who have been diagnosed with diabetes and people who havent 
  summarise(mean_bmi = mean(BMI), 
            sd_bmi = sd(BMI)) |> # calculates the mean and sd of BMI
  view()
```

The average BMI for individuals not diagnosed is 23.2. The average BMI for individuals diagnosed is 25.3. I think that there will be a significant difference in mean BMI between the groups.

#### 2) BMI vs blood pressure:

**Plot MAP histogram**

```{r}
ggplot(diabetes, aes(MAP)) +
  geom_histogram()
```

This gives the reader an idea of what the MAP data looks like. Mean MAP appears to be around 90 mmHg.

**Plot BMI vs MAP and interpret the results:**

I am looking to see if there is a relationship between MAP and BMI

```{r}
ggplot(diabetes, aes(x = MAP, y = BMI)) + 
  geom_point() # creates a dotplot of MAP vs BMI
```

There may be a positive association between MAP and BMI.

**Plot BMI_cat and MAP:**

I am looking to see if there is a difference in mean MAP between BMI categories.

```{r}
ggplot(diabetes, aes(x= BMI_cat, y= MAP)) +
  geom_boxplot() # creates a boxplot of MAP based on BMI category
```

I believe that there will be a significant difference in MAP between BMI categories.

**Calculate mean MAP for each BMI category:**

I am calculating the mean and sd MAP between BMI categories.

```{r}
diabetes_BMI_cat <- diabetes |>
  group_by(BMI_cat) |>
  summarise(mean_MAP = mean(MAP, na.rm=T),
            sd_MAP = sd(MAP, na.rm=T)) |>
  view() # calculates mean and sd MAP for each BMI category
```

The MAP for healthy individuals is around 87, 98 for obese, 94 for overweight, and 82 for underweight. I think there will be a significant difference in MAP between BMI categories.

#### 3) FPG vs Gender vs diabetes_diagnosed

**Plot FPG histogram**

```{r}
ggplot(diabetes, aes(FPG)) +
  geom_histogram()
```

This gives the reader an idea of what the FPG data looks like. The mean FPG appears to be around 4.4.

**Plot FPG and Diabetes_diagnosed:**

I am looking to see if there is a difference in mean FPG between people who have been diagnosed with diabetes and people who have not been diagnosed with diabetes.

```{r}
ggplot(diabetes, aes(x = diabetes_diagnosed, y = FPG)) + 
  geom_boxplot() +
  facet_wrap(~Gender)# creates a boxplot of FPG based on diabetes diagnosis
```

The mean FPG for diabetes diagnosed appears to be around 5.8 and the mean FPG for diabetes not diagnosed appears to be around 4.4. I think that there will be a significant difference in mean FPG between diabetes diagnosis.

**Calculate mean FPG for diabetes and no diabetes:**

I am calculating the mean and sd FPG for diabetes diagnosed and diabetes not diagnosed.

```{r}
diabetes_FPG <- diabetes |>
  group_by(diabetes_diagnosed,Gender) |> # groups calculations by diabetes diagnosed and not diagnosed
  summarise(mean_FPG = mean(FPG), # calculates the mean FPG
            sd_FPG = sd(FPG)) |> # calculates the SD FPG
  view()
```

The mean FPG for people without diabetes is 4.8 and the mean FPG for people with diabetes is 5.9. I think that there will be a significant difference in mean FPG between diabetes diagnosis.
